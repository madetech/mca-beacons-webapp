name: CI/CD pipeline
on: push

jobs:
  install_dependencies:
    name: Install dependencies
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: "14"
      - name: Install npm dependencies
        run: npm ci
        env:
          CYPRESS_INSTALL_BINARY: 0
      - name: Cache dependencies
        uses: actions/cache@v2.1.5
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

  docker_build:
    name: Build and Push Docker image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Extract branch name
        shell: bash
        run: REF=${GITHUB_REF#refs/heads/} && arrREF=(${REF//// }) && echo "##[set-output name=branch;]$(echo ${arrREF[-1]})"
        id: extract_branch
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.AWS_ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}:${{ github.sha }}

  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    needs: install_dependencies

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: "14"
      - name: Restore cache
        uses: actions/cache@v2.1.5
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Run tests
        run: npm run test

  cypress_tests:
    name: Cypress tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Run Cypress tests
        uses: cypress-io/github-action@v2
        with:
          start: npm run start
          build: npm run build
          wait-on: "http://localhost:3000"

  lint_check:
    name: Lint check
    runs-on: ubuntu-latest
    needs: install_dependencies

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: "14"
      - name: Restore cache
        uses: actions/cache@v2.1.5
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Run linter
        run: npm run lint

  prettier_check:
    name: Prettier check
    runs-on: ubuntu-latest
    needs: install_dependencies

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.1.5
        with:
          node-version: "14"
      - name: Restore cache
        uses: actions/cache@v2.1.5
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: Run prettier
        run: npm run format:check

  docker_lint:
    name: Docker lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Docker lint
        uses: brpaz/hadolint-action@v1.5.0

  codeql_check:
    name: CodeQL check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  deploy_dev:
    if: github.ref == 'refs/heads/main'
    name: Deploy Development Environment
    runs-on: ubuntu-latest
    needs:
      [
        install_dependencies,
        docker_build,
        unit_tests,
        cypress_tests,
        lint_check,
        prettier_check,
        docker_lint,
        codeql_check,
      ]

    steps:
      - name: Trigger Integration Pipeline
        run: |
          curl -X POST  -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ secrets.MCA_GITHUB_TOKEN }}" \
            https://api.github.com/repos/mcagov/beacons-integration/actions/workflows/main.yml/dispatches \
            -d '{"ref":"main", "inputs": {"updateImageTags": "true"}}'
